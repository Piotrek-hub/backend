var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.127,1,1.906]],["body/controllers/AppController.html",[0,1.674,1,2.83,2,1.291,3,0.495,4,0.495,5,0.432,6,2.886,7,0.495,8,1.674,9,4.391,10,1.291,11,0.037,12,0.786,13,3.496,14,1.291,15,1.519,16,0.642,17,0.786,18,2.509,19,2.886,20,0.495,21,0.112,22,2.184,23,3.496,24,1.291,25,3.496,26,0.028,27,0.028]],["title/modules/AppModule.html",[28,1.127,29,1.906]],["body/modules/AppModule.html",[1,2.688,2,1.364,3,0.366,4,0.366,5,0.32,11,0.037,16,0.752,17,0.582,18,2.574,19,2.136,20,0.366,21,0.083,26,0.023,27,0.023,28,1.59,29,3.578,30,1.165,31,1.165,32,1.439,33,1.439,34,1.165,35,2.393,36,1.439,37,2.136,38,2.136,39,2.136,40,2.869,41,2.574,42,2.574,43,2.053,44,1.439,45,1.439,46,2.588,47,2.306,48,2.588,49,2.588,50,1.839,51,1.054,52,2.588,53,2.588,54,2.588,55,2.588]],["title/injectables/AppService.html",[18,1.523,56,1.023]],["body/injectables/AppService.html",[3,0.528,4,0.528,5,0.461,7,0.528,8,1.744,9,4.497,11,0.037,12,0.838,14,1.377,15,1.582,16,0.528,17,0.838,18,2.356,20,0.528,21,0.119,24,1.377,26,0.029,27,0.029,56,1.582,57,2.073,58,3.077,59,3.728,60,3.728,61,3.728]],["title/controllers/AuthController.html",[0,1.127,62,1.906]],["body/controllers/AuthController.html",[0,0.929,2,0.929,3,0.356,4,0.356,5,0.311,7,0.356,8,1.336,10,1.336,11,0.037,12,0.813,14,1.336,16,0.656,17,0.565,20,0.356,21,0.08,22,1.571,24,1.336,26,0.022,27,0.022,62,2.259,63,2.075,64,1.786,65,2.514,66,2.3,67,2.985,68,2.985,69,2.514,70,2.575,71,2.514,72,2.514,73,1.628,74,0.901,75,0.813,76,1.628,77,4.051,78,2.259,79,2.514,80,2.311,81,2.514,82,3.496,83,2.514,84,2.075,85,1.571,86,1.024,87,2.075,88,1.398,89,2.569,90,1.571,91,2.113,92,2.075,93,2.514,94,2.514,95,2.075,96,2.514,97,1.628,98,2.514,99,2.514,100,2.514,101,2.514,102,2.514]],["title/guards/AuthGuard.html",[103,2.168,104,1.697]],["body/guards/AuthGuard.html",[3,0.4,4,0.4,5,0.349,7,0.4,8,1.45,11,0.037,12,0.883,14,1.043,16,0.556,17,0.635,20,0.4,21,0.09,24,1.043,26,0.024,27,0.024,56,1.316,66,2.032,73,1.271,74,0.704,75,0.635,76,1.271,97,1.271,104,2.184,105,2.825,106,2.332,107,4.878,108,2.51,109,2.825,110,3.927,111,4.878,112,2.825,113,2.825,114,2.453,115,3.927,116,2.825,117,2.007,118,2.332,119,2.825,120,2.032,121,2.825,122,2.825,123,2.825,124,2.825,125,2.825,126,1.45,127,2.825,128,2.825,129,2.825,130,1.764,131,1.271,132,1.764]],["title/modules/AuthModule.html",[28,1.127,40,1.697]],["body/modules/AuthModule.html",[2,1.441,3,0.396,4,0.396,5,0.346,11,0.037,16,0.724,17,0.629,20,0.396,21,0.089,26,0.024,27,0.024,28,1.659,30,1.26,31,1.26,32,1.556,33,1.556,34,1.26,35,2.498,36,1.556,40,3.08,42,2.641,43,2.17,44,1.556,45,1.556,47,2.437,62,2.806,91,2.641,92,2.311,132,1.748,133,2.311,134,2.799,135,2.311,136,2.799,137,2.799,138,2.799,139,2.799,140,2.311,141,2.799,142,2.799,143,2.799,144,2.799,145,2.799,146,2.799,147,2.799]],["title/injectables/AuthService.html",[56,1.023,91,1.523]],["body/injectables/AuthService.html",[3,0.305,4,0.305,5,0.266,7,0.305,8,1.193,11,0.037,12,0.871,14,1.193,16,0.652,17,0.484,20,0.305,21,0.069,22,1.346,24,1.193,26,0.02,27,0.02,56,1.082,57,1.198,66,2.177,67,2.665,68,2.665,70,2.392,73,1.743,74,0.965,75,0.871,76,1.743,80,2.146,85,1.346,88,1.198,89,2.294,90,1.346,91,1.611,97,1.936,108,1.198,114,2.687,120,0.97,130,2.419,131,1.743,148,1.779,149,2.155,150,2.177,151,2.155,152,3.229,153,2.155,154,1.936,155,3.229,156,2.155,157,2.751,158,1.796,159,1.779,160,2.155,161,2.155,162,2.155,163,2.155,164,3.197,165,3.873,166,2.155,167,1.779,168,2.155,169,3.229,170,3.229,171,2.155,172,2.665,173,2.155]],["title/classes/CreatePostDTO.html",[21,0.098,174,1.697]],["body/classes/CreatePostDTO.html",[3,0.429,4,0.429,5,0.375,7,0.429,10,1.73,11,0.036,12,1.13,15,1.892,16,0.429,20,0.429,21,0.132,26,0.025,27,0.025,75,1.13,174,2.293,175,1.513,176,3.284,177,2.503,178,1.856,179,2.926,180,3.867,181,3.867,182,3.867,183,3.942,184,3.033,185,3.033,186,3.033,187,3.033,188,1.894]],["title/classes/CreateUserDTO.html",[21,0.098,80,1.523]],["body/classes/CreateUserDTO.html",[3,0.461,4,0.461,5,0.403,7,0.461,10,1.597,11,0.036,12,1.092,15,1.856,16,0.461,20,0.461,21,0.138,26,0.027,27,0.027,74,1.211,75,1.092,80,2.158,88,2.877,126,1.794,175,1.625,178,1.947,183,3.827,188,2.034,189,2.314,190,4.009,191,2.688,192,3.256,193,3.256]],["title/classes/LoginUserDTO.html",[21,0.098,70,1.697]],["body/classes/LoginUserDTO.html",[3,0.487,4,0.487,5,0.425,7,0.487,10,1.655,11,0.036,12,1.008,15,1.771,16,0.487,20,0.487,21,0.143,26,0.028,27,0.028,70,2.492,74,1.243,75,1.008,90,3.115,126,1.842,175,1.715,178,2.017,183,3.895,188,2.147,189,2.442,191,2.838,194,3.438]],["title/classes/Post.html",[21,0.098,86,1.243]],["body/classes/Post.html",[3,0.384,4,0.384,5,0.335,7,0.384,10,1.77,11,0.037,12,1.078,15,1.842,16,0.541,20,0.625,21,0.087,26,0.024,27,0.024,51,1.105,75,1.136,86,1.555,120,1.221,132,2.994,175,1.354,178,1.718,179,2.759,180,3.646,181,3.646,182,3.646,195,1.695,196,3.151,197,2.713,198,4.443,199,2.713,200,2.713,201,2.713,202,2.385,203,2.24,204,2.712,205,1.509,206,2.24,207,3.151,208,1.695,209,2.24]],["title/controllers/PostsController.html",[0,1.127,210,1.906]],["body/controllers/PostsController.html",[0,0.917,2,0.917,3,0.352,4,0.352,5,0.307,7,0.352,8,1.324,10,1.324,11,0.037,12,0.806,14,1.324,16,0.652,17,0.559,20,0.352,21,0.079,22,1.552,24,1.324,26,0.022,27,0.022,64,1.765,66,2.29,73,1.118,74,0.619,75,0.559,76,1.118,77,4.031,78,2.239,82,3.472,85,1.552,86,1.012,87,2.05,95,2.05,97,1.614,104,1.381,126,0.917,130,1.552,131,1.118,157,1.765,174,2.561,176,1.552,210,2.239,211,2.05,212,2.05,213,2.547,214,4.606,215,2.484,216,2.484,217,2.484,218,3.472,219,2.484,220,2.05,221,2.05,222,1.614,223,2.05,224,2.05,225,2.484,226,2.484,227,2.484,228,2.05,229,2.484,230,2.484,231,2.05,232,2.484,233,2.484,234,2.484,235,2.05]],["title/modules/PostsModule.html",[28,1.127,41,1.523]],["body/modules/PostsModule.html",[2,1.455,3,0.402,4,0.402,5,0.351,11,0.037,16,0.727,17,0.638,20,0.402,21,0.091,26,0.024,27,0.024,28,1.671,30,1.277,31,1.277,32,1.578,33,1.578,34,1.277,35,2.516,36,2.516,41,2.72,43,2.19,44,1.578,45,1.578,47,1.772,50,2.016,51,1.156,74,0.707,86,1.156,202,1.772,208,2.461,210,2.826,222,2.621,223,2.342,236,2.342,237,2.342,238,2.342,239,2.838,240,2.838,241,2.342,242,2.342,243,2.838]],["title/injectables/PostsService.html",[56,1.023,222,1.373]],["body/injectables/PostsService.html",[3,0.274,4,0.274,5,0.239,7,0.274,8,1.098,11,0.037,12,0.987,14,1.502,15,1.554,16,0.684,17,0.434,20,0.274,21,0.062,24,1.502,26,0.018,27,0.018,51,0.787,56,0.996,57,1.075,66,2.427,73,1.831,74,1.014,75,0.915,76,1.831,78,1.207,84,1.595,85,1.207,86,0.787,97,0.87,108,1.075,114,2.896,117,1.373,120,1.338,126,1.098,130,1.207,131,1.338,157,1.373,158,1.075,159,1.595,172,2.454,174,2.262,176,1.207,179,1.207,205,1.075,213,2.112,221,1.595,222,1.338,235,1.595,241,1.595,244,1.595,245,4.068,246,2.973,247,2.973,248,1.932,249,3.358,250,1.932,251,2.973,252,2.973,253,1.932,254,1.932,255,1.932,256,2.973,257,1.932,258,2.973,259,2.973,260,1.932,261,1.595,262,1.932,263,1.595,264,1.932,265,1.373,266,1.932,267,1.932,268,1.932,269,2.454,270,1.932,271,1.932,272,1.932,273,1.932,274,1.932,275,1.932,276,1.932]],["title/classes/User.html",[21,0.098,154,1.373]],["body/classes/User.html",[3,0.434,4,0.434,5,0.379,7,0.434,10,1.533,11,0.037,12,0.933,15,1.692,16,0.588,20,0.667,21,0.098,26,0.026,27,0.026,51,1.248,74,1.174,75,1.059,120,1.378,126,1.739,132,3.153,154,1.868,175,1.528,178,1.868,196,3.426,198,3.887,202,2.593,203,2.528,204,2.949,205,1.703,207,3.426,277,1.913,278,3.063,279,3.063,280,2.528,281,1.913,282,2.528]],["title/controllers/UsersController.html",[0,1.127,283,1.906]],["body/controllers/UsersController.html",[0,0.882,2,0.882,3,0.338,4,0.338,5,0.295,7,0.338,8,1.287,10,1.287,11,0.038,12,0.783,14,1.287,15,1.378,16,0.64,17,0.537,20,0.338,21,0.076,24,1.287,26,0.021,27,0.021,64,1.697,66,2.259,73,1.568,74,0.868,75,0.537,76,1.568,78,2.176,97,1.851,104,1.328,108,1.328,120,1.568,126,1.519,150,1.568,154,1.075,212,1.971,218,3.395,220,1.971,222,1.851,224,1.971,228,1.971,231,1.971,265,2.475,283,2.176,284,1.971,285,2.388,286,3.484,287,3.484,288,2.388,289,3.484,290,2.388,291,2.388,292,2.388,293,2.388,294,2.388,295,1.971,296,2.388,297,2.388,298,2.388,299,2.388,300,2.388,301,3.484,302,1.971,303,2.388,304,3.484,305,2.388,306,2.388,307,2.388]],["title/modules/UsersModule.html",[28,1.127,42,1.523]],["body/modules/UsersModule.html",[2,1.388,3,0.376,4,0.376,5,0.328,11,0.037,16,0.737,17,0.597,20,0.376,21,0.085,26,0.023,27,0.023,28,1.612,30,1.195,31,1.195,32,1.476,33,1.476,34,1.195,35,2.427,36,2.427,41,2.596,42,2.774,43,2.091,44,1.476,45,1.476,47,2.348,50,1.886,51,1.081,74,0.662,150,2.59,154,1.195,202,1.658,242,2.191,281,2.348,283,2.726,295,2.191,308,2.191,309,2.191,310,2.655,311,2.191,312,2.655,313,2.655,314,2.191,315,2.655,316,2.191]],["title/injectables/UsersService.html",[56,1.023,150,1.373]],["body/injectables/UsersService.html",[3,0.292,4,0.292,5,0.255,7,0.292,8,1.153,11,0.038,12,0.946,14,1.392,15,1.515,16,0.64,17,0.463,20,0.292,21,0.066,24,1.392,26,0.019,27,0.019,51,0.84,56,1.047,57,1.146,66,2.345,73,1.893,74,1.185,75,1.069,76,1.893,80,2.099,88,1.146,89,1.465,97,1.697,108,1.146,114,2.971,120,0.928,126,1.669,131,0.928,150,1.406,154,1.406,164,2.578,167,1.702,205,1.146,213,2.219,249,3.472,261,1.702,265,1.465,269,1.702,302,1.702,314,1.702,316,1.702,317,1.702,318,3.123,319,3.123,320,2.061,321,2.061,322,3.123,323,3.123,324,3.123,325,2.061,326,3.123,327,2.061,328,2.061,329,3.123,330,2.061,331,2.061,332,2.061,333,2.061,334,2.061,335,2.061,336,2.061,337,2.061]],["title/coverage.html",[338,3.418]],["body/coverage.html",[0,1.676,1,1.503,5,0.297,6,1.987,11,0.037,18,1.201,21,0.154,26,0.022,27,0.022,34,1.083,56,1.521,58,1.987,62,1.503,63,1.987,70,1.338,75,0.541,80,1.201,86,0.98,88,1.338,90,1.503,91,1.201,103,1.71,104,1.338,106,1.987,131,1.083,148,1.987,150,1.083,154,1.083,158,1.948,174,1.338,176,1.503,177,1.987,189,2.489,195,2.188,208,1.503,210,1.503,211,1.987,222,1.083,244,1.987,277,2.188,281,1.503,283,1.503,284,1.987,317,1.987,338,1.987,339,2.407,340,2.407,341,2.407,342,2.892,343,4.538,344,5.917,345,4.823,346,3.504,347,5.033,348,3.504,349,4.131,350,1.987,351,2.407,352,2.407,353,2.407,354,2.407]],["title/dependencies.html",[31,1.649,355,2.113]],["body/dependencies.html",[11,0.038,17,0.721,21,0.137,26,0.026,27,0.026,31,1.443,51,1.306,117,3.424,118,2.646,140,2.646,188,2.002,205,1.783,263,2.646,356,4.819,357,3.206,358,3.206,359,3.206,360,3.206,361,3.206,362,3.206,363,3.206,364,3.206,365,4.28,366,3.206,367,3.206,368,3.206,369,3.206,370,3.533,371,3.206,372,3.206,373,3.206,374,3.206,375,3.206,376,3.206,377,3.206,378,3.206,379,3.206,380,3.206,381,3.206,382,3.206,383,3.206]],["title/miscellaneous/functions.html",[384,1.277,385,3.024]],["body/miscellaneous/functions.html",[7,0.631,11,0.032,26,0.032,27,0.032,34,2.523,350,3.676,384,2.222,385,3.676,386,4.453]],["title/index.html",[7,0.363,387,2.56,388,2.56]],["body/index.html",[11,0.032,26,0.032,27,0.032,74,1.071,86,1.751,126,1.587,158,2.39,370,3.548,389,3.548,390,5.155,391,4.298,392,4.298,393,4.298,394,4.298,395,4.298]],["title/modules.html",[30,1.864]],["body/modules.html",[11,0.031,26,0.031,27,0.031,29,2.543,30,1.833,40,2.264,41,2.032,42,2.032,396,5.622,397,5.622,398,5.622,399,5.622]],["title/overview.html",[400,3.418]],["body/overview.html",[2,1.002,11,0.036,18,2.204,26,0.024,27,0.024,28,1.002,29,3.536,30,1.221,31,1.221,32,1.509,33,1.509,34,1.221,35,1.509,36,1.509,37,2.24,38,2.24,39,2.24,40,2.993,41,2.686,42,2.788,43,2.123,44,1.509,45,1.509,57,1.509,91,2.204,103,1.928,133,2.24,135,2.24,150,2.423,175,1.354,222,2.423,236,2.24,237,2.24,238,2.24,308,2.24,309,2.24,311,2.24,400,2.24,401,4.417,402,2.713,403,2.713]],["title/properties.html",[178,1.649,355,2.113]],["body/properties.html",[11,0.037,26,0.032,27,0.032,178,1.962,179,2.723,190,3.598,404,4.359,405,4.359,406,4.359,407,4.359]],["title/miscellaneous/typealiases.html",[384,1.277,408,3.664]],["body/miscellaneous/typealiases.html",[7,0.604,11,0.032,26,0.032,27,0.032,75,0.96,195,2.666,204,3.648,206,4.238,277,2.666,280,4.238,384,2.13,409,4.269,410,3.524,411,3.524]],["title/miscellaneous/variables.html",[384,1.277,412,3.024]],["body/miscellaneous/variables.html",[7,0.518,11,0.035,26,0.029,27,0.029,131,1.648,158,3.109,195,2.287,208,2.916,209,3.022,277,2.287,281,2.916,282,3.022,342,3.022,384,1.827,389,3.022,410,3.022,411,3.022,412,3.022,413,4.668,414,5.412,415,5.412,416,3.662,417,3.662,418,3.662]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":344,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":405,"title":{},"body":{"properties.html":{}}}],["0.0.301",{"_index":374,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":378,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":369,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":345,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":346,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":347,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":348,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":349,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":352,"title":{},"body":{"coverage.html":{}}}],["0x6d3563a4e42516a0669f013386dec54cb16cd63c",{"_index":389,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":403,"title":{},"body":{"overview.html":{}}}],["1.0.6",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["2.4.5",{"_index":363,"title":{},"body":{"dependencies.html":{}}}],["2.8.0",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":401,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["4h",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["5",{"_index":402,"title":{},"body":{"overview.html":{}}}],["60.0.1",{"_index":372,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":380,"title":{},"body":{"dependencies.html":{}}}],["7.2.2",{"_index":375,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":268,"title":{},"body":{"injectables/PostsService.html":{}}}],["address",{"_index":126,"title":{},"body":{"guards/AuthGuard.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["aliases",{"_index":409,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":62,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":104,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":179,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"properties.html":{}}}],["authservice",{"_index":91,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":123,"title":{},"body":{"guards/AuthGuard.html":{}}}],["await",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["body",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["body.author.tolowercase",{"_index":232,"title":{},"body":{"controllers/PostsController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":399,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":396,"title":{},"body":{"modules.html":{}}}],["canactivate",{"_index":107,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":110,"title":{},"body":{"guards/AuthGuard.html":{}}}],["catch",{"_index":129,"title":{},"body":{"guards/AuthGuard.html":{}}}],["checkifexists",{"_index":318,"title":{},"body":{"injectables/UsersService.html":{}}}],["checkifexists(user",{"_index":323,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":175,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"classes/User.html":{},"overview.html":{}}}],["client",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":236,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":237,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":238,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":308,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":309,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":310,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":311,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["console.log(exists",{"_index":334,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":108,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(post.name",{"_index":264,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":331,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(postmodel",{"_index":248,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{}}}],["constructor(usermodel",{"_index":320,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":113,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":122,"title":{},"body":{"guards/AuthGuard.html":{}}}],["contract",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["contract(abi",{"_index":416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contract.methods.users(postdto.author).call",{"_index":271,"title":{},"body":{"injectables/PostsService.html":{}}}],["contract.methods.users(user.address).call",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":225,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":297,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":338,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":213,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["create(@headers",{"_index":230,"title":{},"body":{"controllers/PostsController.html":{}}}],["create(headers",{"_index":215,"title":{},"body":{"controllers/PostsController.html":{}}}],["create(postdto",{"_index":252,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(userdto",{"_index":326,"title":{},"body":{"injectables/UsersService.html":{}}}],["createdpost",{"_index":274,"title":{},"body":{"injectables/PostsService.html":{}}}],["createdpost.save",{"_index":276,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":174,"title":{"classes/CreatePostDTO.html":{}},"body":{"classes/CreatePostDTO.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":80,"title":{"classes/CreateUserDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["dateadded",{"_index":180,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/Post.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":190,"title":{},"body":{"classes/CreateUserDTO.html":{},"properties.html":{}}}],["documentation",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["doesnt",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["essa",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["eth",{"_index":418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exec",{"_index":269,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":111,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exists",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["expiresin",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":361,"title":{},"body":{"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":214,"title":{},"body":{"controllers/PostsController.html":{}}}],["findbyaddress",{"_index":286,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyaddress(@param('address",{"_index":307,"title":{},"body":{"controllers/UsersController.html":{}}}],["findbyaddress(address",{"_index":288,"title":{},"body":{"controllers/UsersController.html":{}}}],["findme",{"_index":287,"title":{},"body":{"controllers/UsersController.html":{}}}],["findme(@headers",{"_index":300,"title":{},"body":{"controllers/UsersController.html":{}}}],["findme(headers",{"_index":291,"title":{},"body":{"controllers/UsersController.html":{}}}],["found",{"_index":273,"title":{},"body":{"injectables/PostsService.html":{}}}],["function",{"_index":351,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":385,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':address",{"_index":289,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('me",{"_index":299,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":387,"title":{"index.html":{}},"body":{}}],["global",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["guard",{"_index":103,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":105,"title":{},"body":{"guards/AuthGuard.html":{}}}],["headers",{"_index":218,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["headers.address",{"_index":231,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["hello",{"_index":60,"title":{},"body":{"injectables/AppService.html":{}}}],["http",{"_index":371,"title":{},"body":{"dependencies.html":{}}}],["httpcode",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostsService.html":{}}}],["httpcode(httpstatus.ok",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@post('/login",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["httpexception('username",{"_index":272,"title":{},"body":{"injectables/PostsService.html":{}}}],["httpexception('wrong",{"_index":234,"title":{},"body":{"controllers/PostsController.html":{}}}],["httpexception(`user",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://rpc2.sepolia.org",{"_index":393,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["httpstatus.bad_request",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.unauthorized",{"_index":235,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["hydrateddocument",{"_index":204,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":258,"title":{},"body":{"injectables/PostsService.html":{}}}],["identifier",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":56,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":57,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":261,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["ipfs",{"_index":370,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["isnotempty",{"_index":183,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{}}}],["js",{"_index":373,"title":{},"body":{"dependencies.html":{}}}],["jwtmodule",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["lib/.../contract.ts",{"_index":413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/contract",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["lib/contract.ts",{"_index":342,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":406,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":324,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(body",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":70,"title":{"classes/LoginUserDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDTO.html":{},"coverage.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":377,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":384,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":249,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["mongodb://127.0.0.1:27017/candao?directconnection=true&serverselectiontimeoutms=2000",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":205,"title":{},"body":{"classes/Post.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":242,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"classes/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":360,"title":{},"body":{"dependencies.html":{}}}],["network",{"_index":390,"title":{},"body":{"index.html":{}}}],["new",{"_index":131,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["null",{"_index":302,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optional",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":400,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":355,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":294,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["post",{"_index":86,"title":{"classes/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"index.html":{}}}],["post('/login",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register')@usepipes(new",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('create",{"_index":229,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":221,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":177,"title":{},"body":{"classes/CreatePostDTO.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":186,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:13",{"_index":185,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:5",{"_index":184,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:8",{"_index":187,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.name",{"_index":243,"title":{},"body":{"modules/PostsModule.html":{}}}],["postdocument",{"_index":206,"title":{},"body":{"classes/Post.html":{},"miscellaneous/typealiases.html":{}}}],["postdto",{"_index":254,"title":{},"body":{"injectables/PostsService.html":{}}}],["postmodel",{"_index":251,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":212,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["posts.controller",{"_index":240,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":223,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["postschema",{"_index":208,"title":{},"body":{"classes/Post.html":{},"modules/PostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postscontroller",{"_index":210,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":226,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":41,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":222,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":265,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise",{"_index":114,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":198,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["prop({required",{"_index":196,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["properties",{"_index":178,"title":{"properties.html":{}},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"classes/User.html":{},"properties.html":{}}}],["provider",{"_index":392,"title":{},"body":{"index.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["queryall",{"_index":245,"title":{},"body":{"injectables/PostsService.html":{}}}],["querybyaddress",{"_index":319,"title":{},"body":{"injectables/UsersService.html":{}}}],["querybyaddress(address",{"_index":329,"title":{},"body":{"injectables/UsersService.html":{}}}],["querybyid",{"_index":246,"title":{},"body":{"injectables/PostsService.html":{}}}],["querybyid(id",{"_index":256,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryuserposts",{"_index":247,"title":{},"body":{"injectables/PostsService.html":{}}}],["queryuserposts(address",{"_index":259,"title":{},"body":{"injectables/PostsService.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["reflect",{"_index":376,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(body",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(user",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["request",{"_index":121,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.headers.address",{"_index":128,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.headers.authorization",{"_index":124,"title":{},"body":{"guards/AuthGuard.html":{}}}],["require('web3",{"_index":417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":207,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["res",{"_index":301,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.posts",{"_index":305,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.user",{"_index":303,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rxjs",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["schema",{"_index":202,"title":{},"body":{"classes/Post.html":{},"modules/PostsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":203,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(post",{"_index":209,"title":{},"body":{"classes/Post.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":282,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{}}}],["sepolia",{"_index":391,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../main.ts",{"_index":386,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post.schema.ts",{"_index":410,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":411,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":58,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":59,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard",{"_index":224,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["src/auth/auth.guard.ts",{"_index":106,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:10",{"_index":109,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:13",{"_index":112,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/dto/posts/create",{"_index":176,"title":{},"body":{"classes/CreatePostDTO.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/dto/users/create",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/dto/users/login",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDTO.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":350,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/posts.controller.ts",{"_index":211,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:22",{"_index":219,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:29",{"_index":217,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module",{"_index":315,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/posts/posts.module.ts",{"_index":239,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service",{"_index":296,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/posts/posts.service.ts",{"_index":244,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:17",{"_index":250,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:20",{"_index":255,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:23",{"_index":257,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:27",{"_index":260,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:31",{"_index":253,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/schemas/post.schema",{"_index":241,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["src/schemas/post.schema.ts",{"_index":195,"title":{},"body":{"classes/Post.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/post.schema.ts:12",{"_index":201,"title":{},"body":{"classes/Post.html":{}}}],["src/schemas/post.schema.ts:15",{"_index":200,"title":{},"body":{"classes/Post.html":{}}}],["src/schemas/post.schema.ts:18",{"_index":199,"title":{},"body":{"classes/Post.html":{}}}],["src/schemas/post.schema.ts:9",{"_index":197,"title":{},"body":{"classes/Post.html":{}}}],["src/schemas/user.schema",{"_index":314,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/schemas/user.schema.ts",{"_index":277,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/user.schema.ts:12",{"_index":279,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:9",{"_index":278,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":284,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:16",{"_index":293,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:25",{"_index":290,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":312,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/users.service.ts",{"_index":317,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":330,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":325,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":327,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":321,"title":{},"body":{"injectables/UsersService.html":{}}}],["started",{"_index":388,"title":{"index.html":{}},"body":{}}],["statements",{"_index":341,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["support",{"_index":397,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":398,"title":{},"body":{"modules.html":{}}}],["table",{"_index":354,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":353,"title":{},"body":{"coverage.html":{}}}],["text",{"_index":181,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/Post.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(body",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(body",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.postmodel(postdto",{"_index":275,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.find",{"_index":270,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.find().exec",{"_index":266,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findone",{"_index":267,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create(body",{"_index":233,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.queryall",{"_index":227,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.queryuserposts(address",{"_index":306,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usermodel(userdto).save",{"_index":337,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.exists",{"_index":333,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":332,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.querybyaddress(address",{"_index":304,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.checkifexists(user",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(user",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.querybyaddress(user.address",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":130,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["title",{"_index":182,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/Post.html":{}}}],["todo",{"_index":394,"title":{},"body":{"index.html":{}}}],["token",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["transformer",{"_index":367,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"classes/Post.html":{},"classes/User.html":{}}}],["try",{"_index":125,"title":{},"body":{"guards/AuthGuard.html":{}}}],["type",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":408,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["unauthorizedexception",{"_index":115,"title":{},"body":{"guards/AuthGuard.html":{}}}],["unknown",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["unlicensed",{"_index":407,"title":{},"body":{"properties.html":{}}}],["useguards",{"_index":220,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard",{"_index":228,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard)@get('me",{"_index":292,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(authguard)@post('create')@usepipes(new",{"_index":216,"title":{},"body":{"controllers/PostsController.html":{}}}],["usepipes",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["usepipes(new",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["user",{"_index":154,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.address",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.address.tolowercase",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":189,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":192,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:5",{"_index":191,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{}}}],["user.dto.ts:7",{"_index":194,"title":{},"body":{"classes/LoginUserDTO.html":{}}}],["user.dto.ts:8",{"_index":193,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.name",{"_index":316,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["userdocument",{"_index":280,"title":{},"body":{"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":328,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.address",{"_index":335,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.address.tolowercase",{"_index":336,"title":{},"body":{"injectables/UsersService.html":{}}}],["usermodel",{"_index":322,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":285,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":313,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":295,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["userschema",{"_index":281,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":283,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":298,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodule",{"_index":42,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":150,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["utils",{"_index":263,"title":{},"body":{"injectables/PostsService.html":{},"dependencies.html":{}}}],["validationpipe",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["validator",{"_index":188,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"dependencies.html":{}}}],["value",{"_index":415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":343,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":412,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":404,"title":{},"body":{"properties.html":{}}}],["walidacja",{"_index":395,"title":{},"body":{"index.html":{}}}],["walletconnect/modal",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["walletconnect/sign",{"_index":364,"title":{},"body":{"dependencies.html":{}}}],["web3",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["web3token",{"_index":116,"title":{},"body":{"guards/AuthGuard.html":{}}}],["web3token.verify(authtoken",{"_index":127,"title":{},"body":{"guards/AuthGuard.html":{}}}],["web3utils",{"_index":262,"title":{},"body":{"injectables/PostsService.html":{}}}],["world",{"_index":61,"title":{},"body":{"injectables/AppService.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PostsModule } from './posts/posts.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    PostsModule,\n    UsersModule,\n    MongooseModule.forRoot(\n      'mongodb://127.0.0.1:27017/candao?directConnection=true&serverSelectionTimeoutMS=2000',\n    ),\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(body: LoginUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LoginUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDTO } from 'src/dto/users/create-user.dto';\nimport { LoginUserDTO } from 'src/dto/users/login-user.dto';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('/register')\n  @UsePipes(new ValidationPipe())\n  async register(@Body() body: CreateUserDTO) {\n    return await this.authService.register(body);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @Post('/login')\n  async login(@Body() body: LoginUserDTO) {\n    return await this.authService.login(body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:10\n                            \n                        \n\n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport Web3Token from 'web3-token';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor() {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    const authToken = request.headers.authorization;\n\n    try {\n      const { address } = await Web3Token.verify(authToken);\n      request.headers.address = address;\n    } catch {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    UsersModule,\n    JwtModule.register({\n      global: true,\n      secret: 'ESSA',\n      signOptions: { expiresIn: '4h' },\n    }),\n  ],\n  providers: [AuthService],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: LoginUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                LoginUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport contract from 'lib/contract';\nimport { CreateUserDTO } from 'src/dto/users/create-user.dto';\nimport { LoginUserDTO } from 'src/dto/users/login-user.dto';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n\n  async register(user: CreateUserDTO): Promise {\n    if (await this.usersService.checkIfExists(user)) {\n      throw new HttpException(`User already exists`, HttpStatus.BAD_REQUEST);\n    }\n\n    return this.usersService.create(user);\n  }\n\n  async login(user: LoginUserDTO): Promise {\n    user.address = user.address.toLowerCase();\n\n    if (!(await this.usersService.queryByAddress(user.address))) {\n      throw new HttpException(\n        'User doesnt exists in mongodb',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    const username = await contract.methods.users(user.address).call();\n    if (username == '') {\n      throw new HttpException(\n        'User doesnt exists on contract',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    return await this.usersService.queryByAddress(user.address);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDTO.html":{"url":"classes/CreatePostDTO.html","title":"class - CreatePostDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/posts/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                dateAdded\n                            \n                            \n                                text\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/posts/create-post.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateAdded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/posts/create-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/dto/posts/create-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/posts/create-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class CreatePostDTO {\n  @IsNotEmpty()\n  author: string;\n\n  @IsNotEmpty()\n  title: string;\n\n  text: string;\n\n  @IsNotEmpty()\n  dateAdded: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/users/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                description\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/users/create-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/dto/users/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/users/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class CreateUserDTO {\n  @IsNotEmpty()\n  address: string;\n\n  @IsNotEmpty()\n  name: string;\n\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDTO.html":{"url":"classes/LoginUserDTO.html","title":"class - LoginUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/users/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/users/login-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/users/login-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class LoginUserDTO {\n  @IsNotEmpty()\n  address: string;\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/post.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                dateAdded\n                            \n                            \n                                    \n                                text\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateAdded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/post.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\nexport type PostDocument = HydratedDocument;\n\n@Schema()\nexport class Post {\n  @Prop({ required: true })\n  author: string;\n\n  @Prop({ required: true })\n  title: string;\n\n  @Prop()\n  text: string;\n\n  @Prop()\n  dateAdded: string;\n}\n\nexport const PostSchema = SchemaFactory.createForClass(Post);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(headers, body: CreatePostDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Post('create')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    headers\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                CreatePostDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Headers,\n  HttpException,\n  HttpStatus,\n  Post,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreatePostDTO } from 'src/dto/posts/create-post.dto';\nimport { PostsService } from './posts.service';\nimport { AuthGuard } from 'src/auth/auth.guard';\n\n@Controller('posts')\nexport class PostsController {\n  constructor(private postService: PostsService) {}\n\n  @Get()\n  async findAll() {\n    return await this.postService.queryAll();\n  }\n\n  @UseGuards(AuthGuard)\n  @Post('create')\n  @UsePipes(new ValidationPipe())\n  async create(@Headers() headers, @Body() body: CreatePostDTO) {\n    if (headers.address == body.author.toLowerCase()) {\n      return await this.postService.create(body);\n    }\n\n    throw new HttpException('Wrong address', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService \n\nPostsService \n\n\n\nPostsModule\n\nPostsModule\n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Post, PostSchema } from 'src/schemas/post.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Post.name, schema: PostSchema }]),\n  ],\n  providers: [PostsService],\n  controllers: [PostsController],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                queryAll\n                            \n                            \n                                    Async\n                                queryByID\n                            \n                            \n                                    Async\n                                queryUserPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(postDTO: CreatePostDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postDTO\n                                    \n                                                CreatePostDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        queryAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    queryAll()\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        queryByID\n                        \n                    \n                \n            \n            \n                \n                    \n                    queryByID(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        queryUserPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    queryUserPosts(address: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    address\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpCode,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreatePostDTO } from 'src/dto/posts/create-post.dto';\nimport { Post } from 'src/schemas/post.schema';\n\nimport contract from 'lib/contract';\n\nimport * as Web3Utils from 'web3-utils';\n\n@Injectable()\nexport class PostsService {\n  constructor(@InjectModel(Post.name) private postModel: Model) {}\n\n  async queryAll(): Promise {\n    return this.postModel.find().exec();\n  }\n  async queryByID(id: string): Promise {\n    return this.postModel.findOne({ _id: id }).exec();\n  }\n\n  async queryUserPosts(address: string): Promise {\n    return this.postModel.find({ author: address }).exec();\n  }\n\n  async create(postDTO: CreatePostDTO) {\n    const username = await contract.methods.users(postDTO.author).call();\n    if (username == '') {\n      throw new HttpException('Username not found', HttpStatus.UNAUTHORIZED);\n    }\n\n    const createdPost = new this.postModel(postDTO);\n    return createdPost.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/user.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\n\nexport type UserDocument = HydratedDocument;\n\n@Schema()\nexport class User {\n  @Prop({ required: true })\n  address: string;\n\n  @Prop({ required: true })\n  name: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                findByAddress\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findMe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        findByAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAddress(address: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':address')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    address\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        findMe\n                        \n                    \n                \n            \n            \n                \n                    \n                    findMe(headers)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    headers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Headers, Param, UseGuards } from '@nestjs/common';\n\nimport { UsersService } from './users.service';\nimport { AuthGuard } from 'src/auth/auth.guard';\nimport { PostsService } from 'src/posts/posts.service';\n\n@Controller('users')\nexport class UsersController {\n  constructor(\n    private userService: UsersService,\n    private postsService: PostsService,\n  ) {}\n\n  @UseGuards(AuthGuard)\n  @Get('me')\n  async findMe(@Headers() headers) {\n    const address = headers.address;\n    const res = { user: null, posts: [] };\n    res.user = await this.userService.queryByAddress(address);\n    res.posts = await this.postsService.queryUserPosts(address);\n    return res;\n  }\n\n  @Get(':address')\n  async findByAddress(@Param('address') address: string) {\n    return await this.userService.queryByAddress(address);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nPostsModule\n\nPostsModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPostsModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PostsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from 'src/schemas/user.schema';\nimport { PostsModule } from 'src/posts/posts.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    PostsModule,\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkIfExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                queryByAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkIfExists\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfExists(user: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        queryByAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    queryByAddress(address: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    address\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { CreateUserDTO } from 'src/dto/users/create-user.dto';\nimport { User } from 'src/schemas/user.schema';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  async queryByAddress(address: string): Promise {\n    return await this.userModel.findOne({ address: address }).exec();\n  }\n\n  async checkIfExists(user: {\n    address: string;\n    name: string;\n  }): Promise {\n    const exists = await this.userModel.exists({\n      $or: [{ address: user.address }, { name: user.name }],\n    });\n    console.log(exists);\n    return exists !== null;\n  }\n\n  async create(userDTO: CreateUserDTO): Promise {\n    userDTO.address = userDTO.address.toLowerCase();\n    return await new this.userModel(userDTO).save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/contract.ts\n            \n            variable\n            contract\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/contract.ts\n            \n            variable\n            Contract\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dto/posts/create-post.dto.ts\n            \n            class\n            CreatePostDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/dto/users/create-user.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dto/users/login-user.dto.ts\n            \n            class\n            LoginUserDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/schemas/post.schema.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/schemas/post.schema.ts\n            \n            variable\n            PostSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/mongoose : ^9.2.2\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @walletconnect/modal : ^2.4.5\n        \n            @walletconnect/sign-client : ^2.8.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            ipfs-http-client : ^60.0.1\n        \n            js-ipfs : ^0.0.301\n        \n            mongoose : ^7.2.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            web3 : ^1.10.0\n        \n            web3-token : ^1.0.6\n        \n            web3-utils : ^4.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCONTRACT ADDRESS: 0x6d3563a4e42516a0669F013386dEc54cb16Cd63c\nNETWORK NAME: SEPOLIA\nNETWORK PROVIDER: https://rpc2.sepolia.org/\n\nTODO\n\n Walidacja POST\n IPFS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPostsModule->UsersModule\n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostDocument   (src/.../post.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/post.schema.ts\n    \n    \n        \n            \n                \n                    \n                    PostDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            contract   (lib/.../contract.ts)\n                        \n                        \n                            Contract   (lib/.../contract.ts)\n                        \n                        \n                            PostSchema   (src/.../post.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/contract.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        contract\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Contract(abi, '0x6d3563a4e42516a0669F013386dEc54cb16Cd63c')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Contract\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('web3-eth-contract')\n                    \n                \n\n\n        \n    \n\n    src/schemas/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Post)\n                    \n                \n\n\n        \n    \n\n    src/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
